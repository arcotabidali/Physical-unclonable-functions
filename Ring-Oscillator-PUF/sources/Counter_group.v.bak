module Counter_group (
  input reset,
  input [3:0] Cha0,
  input [3:0] Cha1,
  input [15:0] RO_out,
  output reg Response
);
//----------------------------------------------------------------------------
// Your Logic Here
//----------------------------------------------------------------------------

wire finish1, finish2;

Counter counter1(
  .reset(reset),
  .clk(RO_out[Cha0]),
  .finish(finish1)
);

Counter counter2(
  .reset(reset),
  .clk(RO_out[Cha1]),
  .finish(finish2)
);

always @(posedge finish1 or posedge finish2)
begin
    if(finish1 == 1)
      Response = 1'b1;
    else
      Response = 1'b0;
end


//----------------------------------------------------------------------------

endmodule


module Counter #
(
  parameter BITS = 16
)
(
  input wire clk, //clk input
  input wire reset, //reset input
  output reg finish
);

reg [BITS-1 : 0] count; // BITS counter output
always @(posedge clk or posedge reset) begin
  if(reset)
    count <= 0;
  else if(count == (2**BITS)-1)
    finish = 1'b1;
  else
   count <= count + 1;
  
end

endmodule
